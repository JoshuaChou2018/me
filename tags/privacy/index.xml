<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Privacy - Tag - HEAL Lab</title>
        <link>https://www.joshuachou.ink/tags/privacy/</link>
        <description>Privacy - Tag - HEAL Lab</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 20 Sep 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.joshuachou.ink/tags/privacy/" rel="self" type="application/rss+xml" /><item>
    <title>[转载] 同态加密：实现数据的“可算不可见”</title>
    <link>https://www.joshuachou.ink/%E8%BD%AC%E8%BD%BD-%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E7%AE%97%E4%B8%8D%E5%8F%AF%E8%A7%81/</link>
    <pubDate>Tue, 20 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/%E8%BD%AC%E8%BD%BD-%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E7%AE%97%E4%B8%8D%E5%8F%AF%E8%A7%81/</guid>
    <description><![CDATA[<blockquote>
<p>同态加密是密码学领域自1978年以来的经典难题，也是实现数据隐私计算的关键技术，在云计算、区块链、隐私计算等领域均存在着广泛的应用需求和一些可行的应用方案。</p>
<p>本文首先介绍同态加密的基本概念、研究进展以及标准化进展，然后对主流的乘法/加法半同态加密算法和全同态加密算法及其工程实现情况进行概述，最后对同态加密在各领域的应用场景进行分析。</p>
</blockquote>
<h2 id="一同态加密概述">一、同态加密概述</h2>
<h3 id="1基本概念">1、基本概念</h3>
<p>同态加密（Homomorphic Encryption, HE）是指满足密文同态运算性质的加密算法，即数据经过同态加密之后，对密文进行特定的计算，得到的密文计算结果在进行对应的同态解密后的明文等同于对明文数据直接进行相同的计算，实现数据的“可算不可见”。同态加密的实现效果如图1所示。</p>
<p>图1：同态加密原理</p>
<p>如果一种同态加密算法支持对密文进行任意形式的计算，则称其为全同态加密（Fully Homomorphic Encryption, FHE）；如果支持对密文进行部分形式的计算，例如仅支持加法、仅支持乘法或支持有限次加法和乘法，则称其为半同态加密或部分同态加密，英文简称为SWHE（Somewhat Homomorphic Encryption）或PHE（Partially Homomorphic Encryption）。一般而言，由于任意计算均可通过加法和乘法构造，若加密算法同时满足加法同态性和乘法同态性，则可称其满足全同态性。</p>
<p>目前，同态加密算法已在区块链、联邦学习等存在数据隐私计算需求的场景实现了落地应用。由于全同态加密仍处于方案探索阶段，现有算法存在运行效率低、密钥过大和密文爆炸等性能问题，在性能方面距离可行工程应用还存在一定的距离。因此，实际应用中的同态加密算法多选取半同态加密（如加法同态），用于在特定应用场景中实现有限的同态计算功能。</p>
<h3 id="2研究进展">2、研究进展</h3>
<p>1978年，Rivest、Adleman（“RSA”中的“R”和“A”）和Dertouzos提出了全同态加密的构想[1]，自此成为了密码学研究领域的一个公开难题。目前，同态加密算法主要分为半同态加密和全同态加密两大类。半同态加密主要包括以RSA算法[2]和ElGamal算法[3]为代表的乘法同态加密、以Paillier算法[4]为代表的加法同态加密以及以Boneh-Goh-Nissim方案[5]为代表的有限次数全同态加密；全同态加密算法主要包括以Gentry方案[6][7]为代表的第一代方案、以BGV方案[8]和BFV方案[9][10]为代表的第二代方案、以GSW方案[11]为代表的第三代方案以及支持浮点数近似计算的CKKS方案[12]等等。上述方案及其基本特性和应用情况总览如表1所示。</p>
<p>表1：各类同态加密算法</p>
<table>
  <thead>
      <tr>
          <th><em><strong>*类型*</strong></em></th>
          <th><em><strong>*算法*</strong></em></th>
          <th><em><strong>*时间*</strong></em></th>
          <th><em><strong>*说明*</strong></em></th>
          <th><em><strong>*实际应用*</strong></em></th>
          <th></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>半同态加密</td>
          <td>乘法同态</td>
          <td>RSA算法</td>
          <td>1977</td>
          <td>非随机化加密，具有乘法同态性的原始算法面临选择明文攻击</td>
          <td>在非同态场景中应用广泛</td>
      </tr>
      <tr>
          <td>ElGamal算法</td>
          <td>1985</td>
          <td>随机化加密</td>
          <td>DSS数字签名标准基于ElGamal数字签名算法的变体</td>
          <td></td>
          <td></td>
      </tr>
      <tr>
          <td>加法同态</td>
          <td>Paillier算法</td>
          <td>1999</td>
          <td>应用最为成熟</td>
          <td>联邦学习</td>
          <td></td>
      </tr>
      <tr>
          <td>有限次数全同态</td>
          <td>Boneh-Goh-Nissim方案</td>
          <td>2005</td>
          <td>仅支持1次乘法同态运算</td>
          <td>/</td>
          <td></td>
      </tr>
      <tr>
          <td>全同态加密</td>
          <td>Gentry方案</td>
          <td>2009</td>
          <td>第一代全同态加密，性能较差</td>
          <td>/</td>
          <td></td>
      </tr>
      <tr>
          <td>BGV方案</td>
          <td>2012</td>
          <td>第二代全同态加密，性能相对较好</td>
          <td>IBM HElib开源库</td>
          <td></td>
          <td></td>
      </tr>
      <tr>
          <td>BFV方案</td>
          <td>2012</td>
          <td>第二代全同态加密，与BGV类似</td>
          <td>微软SEAL开源库</td>
          <td></td>
          <td></td>
      </tr>
      <tr>
          <td>GSW方案</td>
          <td>2013</td>
          <td>第三代全同态加密，基于近似特征向量</td>
          <td>TFHE开源库</td>
          <td></td>
          <td></td>
      </tr>
      <tr>
          <td>CKKS方案</td>
          <td>2017</td>
          <td>可实现浮点数近似计算，适合机器学习建模场景</td>
          <td>HElib和SEAL</td>
          <td></td>
          <td></td>
      </tr>
  </tbody>
</table>
<h3 id="3标准化进展">3、标准化进展</h3>
<p><strong>（1）半同态加密标准化</strong></p>]]></description>
</item><item>
    <title>Homomorphic Encryption</title>
    <link>https://www.joshuachou.ink/homomorphic-encryption/</link>
    <pubDate>Tue, 20 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/homomorphic-encryption/</guid>
    <description><![CDATA[<h2 id="outsourcing-computation-privately">Outsourcing computation, privately</h2>
<p></p>
<p>Homomorphic evaluation function:</p>
<p>Eval: f, Enc(x) -&gt; Enc(f(x))</p>
<h2 id="fully-homomorphic-encryption">Fully homomorphic encryption</h2>
<p></p>
<p><strong>Fully</strong> homomorphic = correctness for <strong>any</strong> efficient f = correctness for <strong>universal</strong> set</p>
<h3 id="approximate-eigenvector-method">Approximate eigenvector method</h3>
<p></p>
<p>基于GSW13的特征向量的构造，我们可以在ciphertext上计算加法和乘法，然后可以通过secret key恢复出message的计算结果。但是这个方法不安全，因为特征向量很容易被找到。</p>
<p>**idea：**使用approximate eigenvectors，在secret key右乘cipher text</p>
<p></p>]]></description>
</item><item>
    <title>SEAL</title>
    <link>https://www.joshuachou.ink/ms-seal/</link>
    <pubDate>Mon, 19 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/ms-seal/</guid>
    <description><![CDATA[<h2 id="microsoft-seal">Microsoft SEAL</h2>
<p></p>
<h2 id="ref">Ref</h2>
<p><a href="https://www.youtube.com/watch?v=XaYEHnaAg8M" target="_blank" rel="noopener noreffer">https://www.youtube.com/watch?v=XaYEHnaAg8M</a></p>]]></description>
</item><item>
    <title>CKKS</title>
    <link>https://www.joshuachou.ink/ckks/</link>
    <pubDate>Sun, 18 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/ckks/</guid>
    <description><![CDATA[<h2 id="whats-is-ckks">What’s is CKKS</h2>
<table>
  <thead>
      <tr>
          <th>Plain Computation</th>
          <th>Encrypted Computation</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>bool, int (uint 64), modulo p</td>
          <td>BGV, BFV, TFHE</td>
      </tr>
      <tr>
          <td>double (float)</td>
          <td>CKKS</td>
      </tr>
  </tbody>
</table>
<p></p>
<h2 id="approximate-arithmetic">Approximate arithmetic</h2>
<p></p>
<p>For floating-point arithmetic, we keep the bits of significand to be the same.</p>
<p>For fixed-point arithmetic, we keep the scaling factor to be the same.</p>
<h2 id="algorithms-in-ckks">Algorithms in CKKS</h2>
<p></p>]]></description>
</item><item>
    <title>Homomorphic Encryption for Arithmetic of Approximate Numbers</title>
    <link>https://www.joshuachou.ink/homomorphic-encryption-for-arithmetic-of-approximate-numbers/</link>
    <pubDate>Sun, 18 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/homomorphic-encryption-for-arithmetic-of-approximate-numbers/</guid>
    <description><![CDATA[<p></p>]]></description>
</item><item>
    <title>Fully homomorphic encryption (FHE)</title>
    <link>https://www.joshuachou.ink/fhe/</link>
    <pubDate>Wed, 10 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/fhe/</guid>
    <description><![CDATA[<h1 id="全同态加密-fully-homomorphic-encryption-fhe">全同态加密 Fully homomorphic encryption (FHE)</h1>
<h2 id="whats-is-fhe">What’s is FHE</h2>
<p>第一种形式：同时使用secret key加密和解密，public key用于第三方加密进行同态计算</p>
<p></p>
<p>第二种形式：asymmetric FHE，只使用public key进行加密，secret key用于解密</p>
<p></p>
<p><strong>Efficient FHE is a giant leap towards httpz://</strong></p>
<p>? what’s httpz?</p>
<h2 id="history">History</h2>
<p></p>
<p><strong>Major task</strong>: find a new scheme to combine both addition and multiplication together.</p>
<h2 id="1-first-generation">1. First generation</h2>
<p>Plain text: single bit</p>]]></description>
</item><item>
    <title>[NeurIPS] Personalized Federated Learning: A Meta-Learning Approach解读</title>
    <link>https://www.joshuachou.ink/neurips-personalized-federated-learning-a-meta-learning-approach/</link>
    <pubDate>Sat, 05 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/neurips-personalized-federated-learning-a-meta-learning-approach/</guid>
    <description><![CDATA[<p><strong>Title:</strong> Personalized Federated Learning: A Meta-Learning Approach</p>
<p><strong>INFO:</strong> 34th Conference on Neural Information Processing Systems (NeurIPS 2020)</p>
<h6 id="研究背景">研究背景</h6>
<p>目前的联邦学习框架是基于所有users的数据，整合训练出一个最优的server模型。</p>
<blockquote>
<p>However, this scheme only develops a common output for all the users, and, therefore, it does not adapt the model to each user.</p>
</blockquote>
<p>但是，这样训练处来的server模型不一定适用于每一个user，尤其在不同的users所独有的数据差异比较大的时候。</p>
<blockquote>
<p>This is an important missing feature, especially given the heterogeneity of the underlying data distribution for various users.</p>
</blockquote>
<p>在heterogeneous的情景下，使用federated averaging方法训练出来的模型可能在每个独立user上的表现会比较差。</p>
<blockquote>
<p>In particular, in the heterogeneous settings where the underlying data distribution of users are not identical, the resulted global model obtained by minimizing the average loss could perform arbitrarily poorly once applied to the local dataset of each user.</p>]]></description>
</item><item>
    <title>[IEEE] Personalized Federated Learning WithDifferential Privacy解读</title>
    <link>https://www.joshuachou.ink/ieee-personalized-federated-learning-with-differential-privacy/</link>
    <pubDate>Fri, 04 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.joshuachou.ink/ieee-personalized-federated-learning-with-differential-privacy/</guid>
    <description><![CDATA[<p><strong>Title:</strong> Personalized Federated Learning With Differential Privacy</p>
<p><strong>DOI:</strong> 10.1109/JIOT.2020.2991416</p>
<p><strong>INFO:</strong> IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 10, OCTOBER 2020</p>
<p><strong>发表周期</strong>: Manuscript received December 15, 2019; revised March 20, 2020; accepted April  13,  2020.  Date of publication April 30, 2020;</p>]]></description>
</item></channel>
</rss>
